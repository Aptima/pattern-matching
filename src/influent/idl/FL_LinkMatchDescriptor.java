/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/**  */
@org.apache.avro.specific.AvroGenerated
public class FL_LinkMatchDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_LinkMatchDescriptor\",\"namespace\":\"influent.idl\",\"doc\":\"\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The UID of the PATTERN link (NOT the underlying matched link ID). Will be referenced in results.\\r\\n\\t\\t Cannot be null.\"},{\"name\":\"role\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"Optional role name, for labeling the pattern for human understanding\",\"default\":null},{\"name\":\"source\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) \\r\\n\\t\\t\\tBeing null indicates that matched links should have no source node\"},{\"name\":\"target\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) \\r\\n\\t\\t\\tBeing null indicates that matched links should have no target node\"},{\"name\":\"tags\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_LinkTag\",\"doc\":\"This is the current list of tags for Links:\",\"symbols\":[\"FINANCIAL\",\"SOCIAL\",\"COMMUNICATION\",\"OTHER\"]}},\"null\"],\"doc\":\"entities should match AT LEAST ONE OF the given tags (e.g FINANCIAL, COMMUNICATION, SOCIAL), if provided\",\"default\":null},{\"name\":\"properties\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_PropertyMatchDescriptor\",\"doc\":\"A PropertyDescriptor is used to describe a possible property that can be present in an entity or link. It describes \\r\\n\\t a single property that can be used in a property search. It can optionally include example or suggested values \\r\\n\\t for searching on.\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"key or tag of the Properties that could be searched on\"},{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"FL_GeoData\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"ISO 3 digit country code\",\"default\":null}]},{\"type\":\"record\",\"name\":\"FL_Series\",\"doc\":\"This is a placeholder for timeseries and other series that are available as property values, which the UI will use to make\\r\\n\\t charts. This may come back from aggregating links.\",\"fields\":[]},\"null\"],\"doc\":\"value of the Property to search on\",\"default\":null},{\"name\":\"constraint\",\"type\":{\"type\":\"enum\",\"name\":\"FL_Constraint\",\"doc\":\"Property value matching constraints\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"symbols\":[\"EQUALS\",\"NOT\",\"FUZZY\",\"LESS_THAN\",\"GREATER_THAN\",\"LESS_THAN_EQUALS\",\"GREATER_THAN_EQUALS\"]},\"doc\":\"EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN, LESS_THAN_EQUALS, GREATER_THAN_EQUALS\"},{\"name\":\"relative\",\"type\":\"boolean\",\"doc\":\"If true, the values on this entity or link are relative to the values of this property\\r\\n\\t\\t    on other entities/links in this pattern or network descriptor, and are not to be interpreted\\r\\n\\t\\t    as absolute values.\\r\\n\\r\\n\\t\\t    ADDED IN 1.4\",\"default\":false},{\"name\":\"weight\",\"type\":\"double\",\"doc\":\"Indicates a relative weight of this to other match criteria\",\"default\":1}]}},\"null\"],\"doc\":\"entities should match ALL of the provided property descriptors (e.g. LABEL, etc), if provided\",\"default\":null},{\"name\":\"path\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_PathMatchDescriptor\",\"doc\":\"\",\"fields\":[{\"name\":\"length\",\"type\":\"long\",\"doc\":\"Number of segments in the path. This allows a \\\"short form\\\" of defining long\\r\\n\\t\\t    chains in a pattern.  For example:\\r\\n\\t\\t      1. define the pattern A -> B\\r\\n\\t\\t      2. match patterns for that link where length EQUALS 3\\r\\n\\t\\t      3. results would actually match the pattern A -> X -> Y -> Z -> B\",\"default\":1},{\"name\":\"constraint\",\"type\":\"FL_Constraint\",\"doc\":\"EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN\"}]}},\"null\"],\"doc\":\"links should match ALL of the provided path descriptors, if provided\",\"default\":null},{\"name\":\"stage\",\"type\":\"int\",\"doc\":\"If not negative, indicates the relative order of events within the pattern. Need not be unique.\\r\\n\\t\\t    If not provided, then transaction order must be inferred from the graph structure.\\r\\n\\r\\n\\t\\t    ADDED IN 1.4\",\"default\":-1},{\"name\":\"weight\",\"type\":\"double\",\"doc\":\"Indicates a relative weight of this to other match criteria\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The UID of the PATTERN link (NOT the underlying matched link ID). Will be referenced in results.
		 Cannot be null. */
   private java.lang.String uid;
  /** Optional role name, for labeling the pattern for human understanding */
   private java.lang.String role;
  /** The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) 
			Being null indicates that matched links should have no source node */
   private java.lang.String source;
  /** The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) 
			Being null indicates that matched links should have no target node */
   private java.lang.String target;
  /** entities should match AT LEAST ONE OF the given tags (e.g FINANCIAL, COMMUNICATION, SOCIAL), if provided */
   private java.util.List<influent.idl.FL_LinkTag> tags;
  /** entities should match ALL of the provided property descriptors (e.g. LABEL, etc), if provided */
   private java.util.List<influent.idl.FL_PropertyMatchDescriptor> properties;
  /** links should match ALL of the provided path descriptors, if provided */
   private java.util.List<influent.idl.FL_PathMatchDescriptor> path;
  /** If not negative, indicates the relative order of events within the pattern. Need not be unique.
		    If not provided, then transaction order must be inferred from the graph structure.

		    ADDED IN 1.4 */
   private int stage;
  /** Indicates a relative weight of this to other match criteria */
   private double weight;

  /**
   * Default constructor.
   */
  public FL_LinkMatchDescriptor() {}

  /**
   * All-args constructor.
   */
  public FL_LinkMatchDescriptor(java.lang.String uid, java.lang.String role, java.lang.String source, java.lang.String target, java.util.List<influent.idl.FL_LinkTag> tags, java.util.List<influent.idl.FL_PropertyMatchDescriptor> properties, java.util.List<influent.idl.FL_PathMatchDescriptor> path, java.lang.Integer stage, java.lang.Double weight) {
    this.uid = uid;
    this.role = role;
    this.source = source;
    this.target = target;
    this.tags = tags;
    this.properties = properties;
    this.path = path;
    this.stage = stage;
    this.weight = weight;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return role;
    case 2: return source;
    case 3: return target;
    case 4: return tags;
    case 5: return properties;
    case 6: return path;
    case 7: return stage;
    case 8: return weight;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.String)value$; break;
    case 1: role = (java.lang.String)value$; break;
    case 2: source = (java.lang.String)value$; break;
    case 3: target = (java.lang.String)value$; break;
    case 4: tags = (java.util.List<influent.idl.FL_LinkTag>)value$; break;
    case 5: properties = (java.util.List<influent.idl.FL_PropertyMatchDescriptor>)value$; break;
    case 6: path = (java.util.List<influent.idl.FL_PathMatchDescriptor>)value$; break;
    case 7: stage = (java.lang.Integer)value$; break;
    case 8: weight = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * The UID of the PATTERN link (NOT the underlying matched link ID). Will be referenced in results.
		 Cannot be null.   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * The UID of the PATTERN link (NOT the underlying matched link ID). Will be referenced in results.
		 Cannot be null.   * @param value the value to set.
   */
  public void setUid(java.lang.String value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'role' field.
   * Optional role name, for labeling the pattern for human understanding   */
  public java.lang.String getRole() {
    return role;
  }

  /**
   * Sets the value of the 'role' field.
   * Optional role name, for labeling the pattern for human understanding   * @param value the value to set.
   */
  public void setRole(java.lang.String value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'source' field.
   * The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) 
			Being null indicates that matched links should have no source node   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) 
			Being null indicates that matched links should have no source node   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'target' field.
   * The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) 
			Being null indicates that matched links should have no target node   */
  public java.lang.String getTarget() {
    return target;
  }

  /**
   * Sets the value of the 'target' field.
   * The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) 
			Being null indicates that matched links should have no target node   * @param value the value to set.
   */
  public void setTarget(java.lang.String value) {
    this.target = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * entities should match AT LEAST ONE OF the given tags (e.g FINANCIAL, COMMUNICATION, SOCIAL), if provided   */
  public java.util.List<influent.idl.FL_LinkTag> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * entities should match AT LEAST ONE OF the given tags (e.g FINANCIAL, COMMUNICATION, SOCIAL), if provided   * @param value the value to set.
   */
  public void setTags(java.util.List<influent.idl.FL_LinkTag> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * entities should match ALL of the provided property descriptors (e.g. LABEL, etc), if provided   */
  public java.util.List<influent.idl.FL_PropertyMatchDescriptor> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * entities should match ALL of the provided property descriptors (e.g. LABEL, etc), if provided   * @param value the value to set.
   */
  public void setProperties(java.util.List<influent.idl.FL_PropertyMatchDescriptor> value) {
    this.properties = value;
  }

  /**
   * Gets the value of the 'path' field.
   * links should match ALL of the provided path descriptors, if provided   */
  public java.util.List<influent.idl.FL_PathMatchDescriptor> getPath() {
    return path;
  }

  /**
   * Sets the value of the 'path' field.
   * links should match ALL of the provided path descriptors, if provided   * @param value the value to set.
   */
  public void setPath(java.util.List<influent.idl.FL_PathMatchDescriptor> value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'stage' field.
   * If not negative, indicates the relative order of events within the pattern. Need not be unique.
		    If not provided, then transaction order must be inferred from the graph structure.

		    ADDED IN 1.4   */
  public java.lang.Integer getStage() {
    return stage;
  }

  /**
   * Sets the value of the 'stage' field.
   * If not negative, indicates the relative order of events within the pattern. Need not be unique.
		    If not provided, then transaction order must be inferred from the graph structure.

		    ADDED IN 1.4   * @param value the value to set.
   */
  public void setStage(java.lang.Integer value) {
    this.stage = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * Indicates a relative weight of this to other match criteria   */
  public java.lang.Double getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * Indicates a relative weight of this to other match criteria   * @param value the value to set.
   */
  public void setWeight(java.lang.Double value) {
    this.weight = value;
  }

  /** Creates a new FL_LinkMatchDescriptor RecordBuilder */
  public static influent.idl.FL_LinkMatchDescriptor.Builder newBuilder() {
    return new influent.idl.FL_LinkMatchDescriptor.Builder();
  }
  
  /** Creates a new FL_LinkMatchDescriptor RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_LinkMatchDescriptor.Builder newBuilder(influent.idl.FL_LinkMatchDescriptor.Builder other) {
    return new influent.idl.FL_LinkMatchDescriptor.Builder(other);
  }
  
  /** Creates a new FL_LinkMatchDescriptor RecordBuilder by copying an existing FL_LinkMatchDescriptor instance */
  public static influent.idl.FL_LinkMatchDescriptor.Builder newBuilder(influent.idl.FL_LinkMatchDescriptor other) {
    return new influent.idl.FL_LinkMatchDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_LinkMatchDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_LinkMatchDescriptor>
    implements org.apache.avro.data.RecordBuilder<FL_LinkMatchDescriptor> {

    private java.lang.String uid;
    private java.lang.String role;
    private java.lang.String source;
    private java.lang.String target;
    private java.util.List<influent.idl.FL_LinkTag> tags;
    private java.util.List<influent.idl.FL_PropertyMatchDescriptor> properties;
    private java.util.List<influent.idl.FL_PathMatchDescriptor> path;
    private int stage;
    private double weight;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_LinkMatchDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_LinkMatchDescriptor.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FL_LinkMatchDescriptor instance */
    private Builder(influent.idl.FL_LinkMatchDescriptor other) {
            super(influent.idl.FL_LinkMatchDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.role)) {
        this.role = data().deepCopy(fields()[1].schema(), other.role);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.target)) {
        this.target = data().deepCopy(fields()[3].schema(), other.target);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tags)) {
        this.tags = data().deepCopy(fields()[4].schema(), other.tags);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.properties)) {
        this.properties = data().deepCopy(fields()[5].schema(), other.properties);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.path)) {
        this.path = data().deepCopy(fields()[6].schema(), other.path);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.stage)) {
        this.stage = data().deepCopy(fields()[7].schema(), other.stage);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.weight)) {
        this.weight = data().deepCopy(fields()[8].schema(), other.weight);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'uid' field */
    public java.lang.String getUid() {
      return uid;
    }
    
    /** Sets the value of the 'uid' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setUid(java.lang.String value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uid' field has been set */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uid' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'role' field */
    public java.lang.String getRole() {
      return role;
    }
    
    /** Sets the value of the 'role' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setRole(java.lang.String value) {
      validate(fields()[1], value);
      this.role = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'role' field has been set */
    public boolean hasRole() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'role' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearRole() {
      role = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.lang.String getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setSource(java.lang.String value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'source' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'target' field */
    public java.lang.String getTarget() {
      return target;
    }
    
    /** Sets the value of the 'target' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setTarget(java.lang.String value) {
      validate(fields()[3], value);
      this.target = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'target' field has been set */
    public boolean hasTarget() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'target' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearTarget() {
      target = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.List<influent.idl.FL_LinkTag> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setTags(java.util.List<influent.idl.FL_LinkTag> value) {
      validate(fields()[4], value);
      this.tags = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'tags' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearTags() {
      tags = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'properties' field */
    public java.util.List<influent.idl.FL_PropertyMatchDescriptor> getProperties() {
      return properties;
    }
    
    /** Sets the value of the 'properties' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setProperties(java.util.List<influent.idl.FL_PropertyMatchDescriptor> value) {
      validate(fields()[5], value);
      this.properties = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'properties' field has been set */
    public boolean hasProperties() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'properties' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'path' field */
    public java.util.List<influent.idl.FL_PathMatchDescriptor> getPath() {
      return path;
    }
    
    /** Sets the value of the 'path' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setPath(java.util.List<influent.idl.FL_PathMatchDescriptor> value) {
      validate(fields()[6], value);
      this.path = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'path' field has been set */
    public boolean hasPath() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'path' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearPath() {
      path = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'stage' field */
    public java.lang.Integer getStage() {
      return stage;
    }
    
    /** Sets the value of the 'stage' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setStage(int value) {
      validate(fields()[7], value);
      this.stage = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'stage' field has been set */
    public boolean hasStage() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'stage' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearStage() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Double getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder setWeight(double value) {
      validate(fields()[8], value);
      this.weight = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'weight' field */
    public influent.idl.FL_LinkMatchDescriptor.Builder clearWeight() {
      fieldSetFlags()[8] = false;
      return this;
    }

    public FL_LinkMatchDescriptor build() {
      try {
        FL_LinkMatchDescriptor record = new FL_LinkMatchDescriptor();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.String) defaultValue(fields()[0]);
        record.role = fieldSetFlags()[1] ? this.role : (java.lang.String) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.String) defaultValue(fields()[2]);
        record.target = fieldSetFlags()[3] ? this.target : (java.lang.String) defaultValue(fields()[3]);
        record.tags = fieldSetFlags()[4] ? this.tags : (java.util.List<influent.idl.FL_LinkTag>) defaultValue(fields()[4]);
        record.properties = fieldSetFlags()[5] ? this.properties : (java.util.List<influent.idl.FL_PropertyMatchDescriptor>) defaultValue(fields()[5]);
        record.path = fieldSetFlags()[6] ? this.path : (java.util.List<influent.idl.FL_PathMatchDescriptor>) defaultValue(fields()[6]);
        record.stage = fieldSetFlags()[7] ? this.stage : (java.lang.Integer) defaultValue(fields()[7]);
        record.weight = fieldSetFlags()[8] ? this.weight : (java.lang.Double) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
