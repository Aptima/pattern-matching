/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/**  */
@org.apache.avro.specific.AvroGenerated
public class FL_PathMatchDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_PathMatchDescriptor\",\"namespace\":\"influent.idl\",\"doc\":\"\",\"fields\":[{\"name\":\"length\",\"type\":\"long\",\"doc\":\"Number of segments in the path. This allows a \\\"short form\\\" of defining long\\r\\n\\t\\t    chains in a pattern.  For example:\\r\\n\\t\\t      1. define the pattern A -> B\\r\\n\\t\\t      2. match patterns for that link where length EQUALS 3\\r\\n\\t\\t      3. results would actually match the pattern A -> X -> Y -> Z -> B\",\"default\":1},{\"name\":\"constraint\",\"type\":{\"type\":\"enum\",\"name\":\"FL_Constraint\",\"doc\":\"Property value matching constraints\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"symbols\":[\"EQUALS\",\"NOT\",\"FUZZY\",\"LESS_THAN\",\"GREATER_THAN\",\"LESS_THAN_EQUALS\",\"GREATER_THAN_EQUALS\"]},\"doc\":\"EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Number of segments in the path. This allows a "short form" of defining long
		    chains in a pattern.  For example:
		      1. define the pattern A -> B
		      2. match patterns for that link where length EQUALS 3
		      3. results would actually match the pattern A -> X -> Y -> Z -> B */
   private long length;
  /** EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN */
   private influent.idl.FL_Constraint constraint;

  /**
   * Default constructor.
   */
  public FL_PathMatchDescriptor() {}

  /**
   * All-args constructor.
   */
  public FL_PathMatchDescriptor(java.lang.Long length, influent.idl.FL_Constraint constraint) {
    this.length = length;
    this.constraint = constraint;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return length;
    case 1: return constraint;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: length = (java.lang.Long)value$; break;
    case 1: constraint = (influent.idl.FL_Constraint)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'length' field.
   * Number of segments in the path. This allows a "short form" of defining long
		    chains in a pattern.  For example:
		      1. define the pattern A -> B
		      2. match patterns for that link where length EQUALS 3
		      3. results would actually match the pattern A -> X -> Y -> Z -> B   */
  public java.lang.Long getLength() {
    return length;
  }

  /**
   * Sets the value of the 'length' field.
   * Number of segments in the path. This allows a "short form" of defining long
		    chains in a pattern.  For example:
		      1. define the pattern A -> B
		      2. match patterns for that link where length EQUALS 3
		      3. results would actually match the pattern A -> X -> Y -> Z -> B   * @param value the value to set.
   */
  public void setLength(java.lang.Long value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'constraint' field.
   * EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN   */
  public influent.idl.FL_Constraint getConstraint() {
    return constraint;
  }

  /**
   * Sets the value of the 'constraint' field.
   * EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN   * @param value the value to set.
   */
  public void setConstraint(influent.idl.FL_Constraint value) {
    this.constraint = value;
  }

  /** Creates a new FL_PathMatchDescriptor RecordBuilder */
  public static influent.idl.FL_PathMatchDescriptor.Builder newBuilder() {
    return new influent.idl.FL_PathMatchDescriptor.Builder();
  }
  
  /** Creates a new FL_PathMatchDescriptor RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_PathMatchDescriptor.Builder newBuilder(influent.idl.FL_PathMatchDescriptor.Builder other) {
    return new influent.idl.FL_PathMatchDescriptor.Builder(other);
  }
  
  /** Creates a new FL_PathMatchDescriptor RecordBuilder by copying an existing FL_PathMatchDescriptor instance */
  public static influent.idl.FL_PathMatchDescriptor.Builder newBuilder(influent.idl.FL_PathMatchDescriptor other) {
    return new influent.idl.FL_PathMatchDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_PathMatchDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_PathMatchDescriptor>
    implements org.apache.avro.data.RecordBuilder<FL_PathMatchDescriptor> {

    private long length;
    private influent.idl.FL_Constraint constraint;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_PathMatchDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_PathMatchDescriptor.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FL_PathMatchDescriptor instance */
    private Builder(influent.idl.FL_PathMatchDescriptor other) {
            super(influent.idl.FL_PathMatchDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.length)) {
        this.length = data().deepCopy(fields()[0].schema(), other.length);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.constraint)) {
        this.constraint = data().deepCopy(fields()[1].schema(), other.constraint);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'length' field */
    public java.lang.Long getLength() {
      return length;
    }
    
    /** Sets the value of the 'length' field */
    public influent.idl.FL_PathMatchDescriptor.Builder setLength(long value) {
      validate(fields()[0], value);
      this.length = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'length' field has been set */
    public boolean hasLength() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'length' field */
    public influent.idl.FL_PathMatchDescriptor.Builder clearLength() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'constraint' field */
    public influent.idl.FL_Constraint getConstraint() {
      return constraint;
    }
    
    /** Sets the value of the 'constraint' field */
    public influent.idl.FL_PathMatchDescriptor.Builder setConstraint(influent.idl.FL_Constraint value) {
      validate(fields()[1], value);
      this.constraint = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'constraint' field has been set */
    public boolean hasConstraint() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'constraint' field */
    public influent.idl.FL_PathMatchDescriptor.Builder clearConstraint() {
      constraint = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    public FL_PathMatchDescriptor build() {
      try {
        FL_PathMatchDescriptor record = new FL_PathMatchDescriptor();
        record.length = fieldSetFlags()[0] ? this.length : (java.lang.Long) defaultValue(fields()[0]);
        record.constraint = fieldSetFlags()[1] ? this.constraint : (influent.idl.FL_Constraint) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
