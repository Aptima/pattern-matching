/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** Defines a pattern, either for input by the user, or as part of a pattern library. */
@org.apache.avro.specific.AvroGenerated
public class FL_PatternDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_PatternDescriptor\",\"namespace\":\"influent.idl\",\"doc\":\"Defines a pattern, either for input by the user, or as part of a pattern library.\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unique ID of the pattern *\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"displayable name of the pattern *\"},{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"displayable long description of the pattern *\",\"default\":null},{\"name\":\"entities\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_EntityMatchDescriptor\",\"doc\":\"Description of entity match criteria within a pattern.\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The UID of the PATTERN node (NOT the underlying matched entity ID).\\r\\n\\t\\t Will be referenced by FL_LinkMatchDescriptors as source or target, and in results.\\r\\n\\t\\t Cannot be null.\"},{\"name\":\"role\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"Optional role name, for labeling the pattern for human understanding\",\"default\":null},{\"name\":\"sameAs\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"- uid of another FL_EntityMatchDescriptor\\r\\n\\t\\t - if provided, this entity must match the same underlying entity that other node\\r\\n\\t\\t - used in the sequence diagram instead of allowing cycles\",\"default\":null},{\"name\":\"entities\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"null\"],\"doc\":\"entities should match AT LEAST ONE OF the given entity IDs, if provided\",\"default\":null},{\"name\":\"tags\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_EntityTag\",\"doc\":\"This is the current list of tags for Entities:\",\"symbols\":[\"ACCOUNT\",\"GROUP\",\"CLUSTER\",\"FILE\",\"ANONYMOUS\",\"OTHER\"]}},\"null\"],\"doc\":\"entities should match AT LEAST ONE OF the given tags (e.g ACCOUNT), if provided\",\"default\":null},{\"name\":\"properties\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_PropertyMatchDescriptor\",\"doc\":\"A PropertyDescriptor is used to describe a possible property that can be present in an entity or link. It describes \\r\\n\\t a single property that can be used in a property search. It can optionally include example or suggested values \\r\\n\\t for searching on.\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"key or tag of the Properties that could be searched on\"},{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"FL_GeoData\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"ISO 3 digit country code\",\"default\":null}]},{\"type\":\"record\",\"name\":\"FL_Series\",\"doc\":\"This is a placeholder for timeseries and other series that are available as property values, which the UI will use to make\\r\\n\\t charts. This may come back from aggregating links.\",\"fields\":[]},\"null\"],\"doc\":\"value of the Property to search on\",\"default\":null},{\"name\":\"constraint\",\"type\":{\"type\":\"enum\",\"name\":\"FL_Constraint\",\"doc\":\"Property value matching constraints\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"symbols\":[\"EQUALS\",\"NOT\",\"FUZZY\",\"LESS_THAN\",\"GREATER_THAN\",\"LESS_THAN_EQUALS\",\"GREATER_THAN_EQUALS\"]},\"doc\":\"EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN, LESS_THAN_EQUALS, GREATER_THAN_EQUALS\"},{\"name\":\"relative\",\"type\":\"boolean\",\"doc\":\"If true, the values on this entity or link are relative to the values of this property\\r\\n\\t\\t    on other entities/links in this pattern or network descriptor, and are not to be interpreted\\r\\n\\t\\t    as absolute values.\\r\\n\\r\\n\\t\\t    ADDED IN 1.4\",\"default\":false},{\"name\":\"weight\",\"type\":\"double\",\"doc\":\"Indicates a relative weight of this to other match criteria\",\"default\":1}]}},\"null\"],\"doc\":\"entities should match ALL of the provided property descriptors (e.g. LABEL, GEO, etc)\\r\\n\\t\\t    e.g. logical \\\"AND\\\". Partial matches may be returned, if scoring is provided.\",\"default\":null},{\"name\":\"examplars\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"null\"],\"doc\":\"used for QBE -- not used to match like the entities list, this list of entities\\r\\n\\t\\t    should be used by the system to infer the above constraints when the user does not\\r\\n\\t\\t    provide them.\\r\\n\\r\\n \\t\\t\\tADDED IN 1.4\",\"default\":null},{\"name\":\"weight\",\"type\":\"double\",\"doc\":\"Indicates a relative weight of this to other match criteria\",\"default\":1}]}},\"doc\":\"- ordered list of entity criteria for the pattern\\r\\n\\t\\t - each represents one stage in an ACYCLIC flow/sequence diagram\\r\\n\\t\\t - the first nodes in the ordered list represent stages earlier in the sequence of events\\r\\n\\t\\t - if multiple nodes need represent the same underlying entity during the process, use \\\"sameAs\\\" on the node\"},{\"name\":\"links\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_LinkMatchDescriptor\",\"doc\":\"\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The UID of the PATTERN link (NOT the underlying matched link ID). Will be referenced in results.\\r\\n\\t\\t Cannot be null.\"},{\"name\":\"role\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"Optional role name, for labeling the pattern for human understanding\",\"default\":null},{\"name\":\"source\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) \\r\\n\\t\\t\\tBeing null indicates that matched links should have no source node\"},{\"name\":\"target\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID) \\r\\n\\t\\t\\tBeing null indicates that matched links should have no target node\"},{\"name\":\"tags\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_LinkTag\",\"doc\":\"This is the current list of tags for Links:\",\"symbols\":[\"FINANCIAL\",\"SOCIAL\",\"COMMUNICATION\",\"OTHER\"]}},\"null\"],\"doc\":\"entities should match AT LEAST ONE OF the given tags (e.g FINANCIAL, COMMUNICATION, SOCIAL), if provided\",\"default\":null},{\"name\":\"properties\",\"type\":[{\"type\":\"array\",\"items\":\"FL_PropertyMatchDescriptor\"},\"null\"],\"doc\":\"entities should match ALL of the provided property descriptors (e.g. LABEL, etc), if provided\",\"default\":null},{\"name\":\"path\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_PathMatchDescriptor\",\"doc\":\"\",\"fields\":[{\"name\":\"length\",\"type\":\"long\",\"doc\":\"Number of segments in the path. This allows a \\\"short form\\\" of defining long\\r\\n\\t\\t    chains in a pattern.  For example:\\r\\n\\t\\t      1. define the pattern A -> B\\r\\n\\t\\t      2. match patterns for that link where length EQUALS 3\\r\\n\\t\\t      3. results would actually match the pattern A -> X -> Y -> Z -> B\",\"default\":1},{\"name\":\"constraint\",\"type\":\"FL_Constraint\",\"doc\":\"EQUALS, NOT, FUZZY, LESS_THAN, GREATER_THAN\"}]}},\"null\"],\"doc\":\"links should match ALL of the provided path descriptors, if provided\",\"default\":null},{\"name\":\"stage\",\"type\":\"int\",\"doc\":\"If not negative, indicates the relative order of events within the pattern. Need not be unique.\\r\\n\\t\\t    If not provided, then transaction order must be inferred from the graph structure.\\r\\n\\r\\n\\t\\t    ADDED IN 1.4\",\"default\":-1},{\"name\":\"weight\",\"type\":\"double\",\"doc\":\"Indicates a relative weight of this to other match criteria\",\"default\":1}]}},\"doc\":\"- link criteria between the entities above\\r\\n\\t\\t - as the entities represent stages in an acyclic flow diagram, these links must not create cycles\\r\\n\\t\\t - if cycles are required, use the \\\"sameAs\\\" field on the node to indicate that multiple nodes represent the same entity\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** unique ID of the pattern * */
   private java.lang.String uid;
  /** displayable name of the pattern * */
   private java.lang.String name;
  /** displayable long description of the pattern * */
   private java.lang.String description;
  /** - ordered list of entity criteria for the pattern
		 - each represents one stage in an ACYCLIC flow/sequence diagram
		 - the first nodes in the ordered list represent stages earlier in the sequence of events
		 - if multiple nodes need represent the same underlying entity during the process, use "sameAs" on the node */
   private java.util.List<influent.idl.FL_EntityMatchDescriptor> entities;
  /** - link criteria between the entities above
		 - as the entities represent stages in an acyclic flow diagram, these links must not create cycles
		 - if cycles are required, use the "sameAs" field on the node to indicate that multiple nodes represent the same entity */
   private java.util.List<influent.idl.FL_LinkMatchDescriptor> links;

  /**
   * Default constructor.
   */
  public FL_PatternDescriptor() {}

  /**
   * All-args constructor.
   */
  public FL_PatternDescriptor(java.lang.String uid, java.lang.String name, java.lang.String description, java.util.List<influent.idl.FL_EntityMatchDescriptor> entities, java.util.List<influent.idl.FL_LinkMatchDescriptor> links) {
    this.uid = uid;
    this.name = name;
    this.description = description;
    this.entities = entities;
    this.links = links;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return name;
    case 2: return description;
    case 3: return entities;
    case 4: return links;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: entities = (java.util.List<influent.idl.FL_EntityMatchDescriptor>)value$; break;
    case 4: links = (java.util.List<influent.idl.FL_LinkMatchDescriptor>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * unique ID of the pattern *   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * unique ID of the pattern *   * @param value the value to set.
   */
  public void setUid(java.lang.String value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * displayable name of the pattern *   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * displayable name of the pattern *   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * displayable long description of the pattern *   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * displayable long description of the pattern *   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'entities' field.
   * - ordered list of entity criteria for the pattern
		 - each represents one stage in an ACYCLIC flow/sequence diagram
		 - the first nodes in the ordered list represent stages earlier in the sequence of events
		 - if multiple nodes need represent the same underlying entity during the process, use "sameAs" on the node   */
  public java.util.List<influent.idl.FL_EntityMatchDescriptor> getEntities() {
    return entities;
  }

  /**
   * Sets the value of the 'entities' field.
   * - ordered list of entity criteria for the pattern
		 - each represents one stage in an ACYCLIC flow/sequence diagram
		 - the first nodes in the ordered list represent stages earlier in the sequence of events
		 - if multiple nodes need represent the same underlying entity during the process, use "sameAs" on the node   * @param value the value to set.
   */
  public void setEntities(java.util.List<influent.idl.FL_EntityMatchDescriptor> value) {
    this.entities = value;
  }

  /**
   * Gets the value of the 'links' field.
   * - link criteria between the entities above
		 - as the entities represent stages in an acyclic flow diagram, these links must not create cycles
		 - if cycles are required, use the "sameAs" field on the node to indicate that multiple nodes represent the same entity   */
  public java.util.List<influent.idl.FL_LinkMatchDescriptor> getLinks() {
    return links;
  }

  /**
   * Sets the value of the 'links' field.
   * - link criteria between the entities above
		 - as the entities represent stages in an acyclic flow diagram, these links must not create cycles
		 - if cycles are required, use the "sameAs" field on the node to indicate that multiple nodes represent the same entity   * @param value the value to set.
   */
  public void setLinks(java.util.List<influent.idl.FL_LinkMatchDescriptor> value) {
    this.links = value;
  }

  /** Creates a new FL_PatternDescriptor RecordBuilder */
  public static influent.idl.FL_PatternDescriptor.Builder newBuilder() {
    return new influent.idl.FL_PatternDescriptor.Builder();
  }
  
  /** Creates a new FL_PatternDescriptor RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_PatternDescriptor.Builder newBuilder(influent.idl.FL_PatternDescriptor.Builder other) {
    return new influent.idl.FL_PatternDescriptor.Builder(other);
  }
  
  /** Creates a new FL_PatternDescriptor RecordBuilder by copying an existing FL_PatternDescriptor instance */
  public static influent.idl.FL_PatternDescriptor.Builder newBuilder(influent.idl.FL_PatternDescriptor other) {
    return new influent.idl.FL_PatternDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_PatternDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_PatternDescriptor>
    implements org.apache.avro.data.RecordBuilder<FL_PatternDescriptor> {

    private java.lang.String uid;
    private java.lang.String name;
    private java.lang.String description;
    private java.util.List<influent.idl.FL_EntityMatchDescriptor> entities;
    private java.util.List<influent.idl.FL_LinkMatchDescriptor> links;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_PatternDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_PatternDescriptor.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FL_PatternDescriptor instance */
    private Builder(influent.idl.FL_PatternDescriptor other) {
            super(influent.idl.FL_PatternDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entities)) {
        this.entities = data().deepCopy(fields()[3].schema(), other.entities);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.links)) {
        this.links = data().deepCopy(fields()[4].schema(), other.links);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'uid' field */
    public java.lang.String getUid() {
      return uid;
    }
    
    /** Sets the value of the 'uid' field */
    public influent.idl.FL_PatternDescriptor.Builder setUid(java.lang.String value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uid' field has been set */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uid' field */
    public influent.idl.FL_PatternDescriptor.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public influent.idl.FL_PatternDescriptor.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public influent.idl.FL_PatternDescriptor.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public influent.idl.FL_PatternDescriptor.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public influent.idl.FL_PatternDescriptor.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'entities' field */
    public java.util.List<influent.idl.FL_EntityMatchDescriptor> getEntities() {
      return entities;
    }
    
    /** Sets the value of the 'entities' field */
    public influent.idl.FL_PatternDescriptor.Builder setEntities(java.util.List<influent.idl.FL_EntityMatchDescriptor> value) {
      validate(fields()[3], value);
      this.entities = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'entities' field has been set */
    public boolean hasEntities() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'entities' field */
    public influent.idl.FL_PatternDescriptor.Builder clearEntities() {
      entities = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'links' field */
    public java.util.List<influent.idl.FL_LinkMatchDescriptor> getLinks() {
      return links;
    }
    
    /** Sets the value of the 'links' field */
    public influent.idl.FL_PatternDescriptor.Builder setLinks(java.util.List<influent.idl.FL_LinkMatchDescriptor> value) {
      validate(fields()[4], value);
      this.links = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'links' field has been set */
    public boolean hasLinks() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'links' field */
    public influent.idl.FL_PatternDescriptor.Builder clearLinks() {
      links = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    public FL_PatternDescriptor build() {
      try {
        FL_PatternDescriptor record = new FL_PatternDescriptor();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.entities = fieldSetFlags()[3] ? this.entities : (java.util.List<influent.idl.FL_EntityMatchDescriptor>) defaultValue(fields()[3]);
        record.links = fieldSetFlags()[4] ? this.links : (java.util.List<influent.idl.FL_LinkMatchDescriptor>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
