/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** Used to add constraints for entity searches. The key indicates the property to make the constraint on, while the
	 value field is set to the desired value. The type field indicates how the constraint should be treated (ex,
	 constrain results to those where the "count" property has a value of "LESS_THAN" "100"). */
@org.apache.avro.specific.AvroGenerated
public class FL_PropertyDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_PropertyDescriptor\",\"namespace\":\"influent.idl\",\"doc\":\"Used to add constraints for entity searches. The key indicates the property to make the constraint on, while the\\r\\n\\t value field is set to the desired value. The type field indicates how the constraint should be treated (ex,\\r\\n\\t constrain results to those where the \\\"count\\\" property has a value of \\\"LESS_THAN\\\" \\\"100\\\").\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"key of the Property to search on\"},{\"name\":\"friendlyText\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"a human readable label to display if the key isn't friendly (optional)\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FL_PropertyType\",\"doc\":\"Allowed types for Property values.\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"SERIES\",\"OTHER\"]},\"doc\":\"type of the Property to search on\"},{\"name\":\"range\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_Constraint\",\"doc\":\"Property value matching constraints\\r\\n\\r\\n\\t CHANGED IN 1.4\",\"symbols\":[\"EQUALS\",\"NOT\",\"FUZZY\",\"LESS_THAN\",\"GREATER_THAN\",\"LESS_THAN_EQUALS\",\"GREATER_THAN_EQUALS\"]}},\"null\"],\"doc\":\"list of possible values, or descriptions of ranges allowed\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** key of the Property to search on */
   private java.lang.String key;
  /** a human readable label to display if the key isn't friendly (optional) */
   private java.lang.String friendlyText;
  /** type of the Property to search on */
   private influent.idl.FL_PropertyType type;
  /** list of possible values, or descriptions of ranges allowed */
   private java.util.List<influent.idl.FL_Constraint> range;

  /**
   * Default constructor.
   */
  public FL_PropertyDescriptor() {}

  /**
   * All-args constructor.
   */
  public FL_PropertyDescriptor(java.lang.String key, java.lang.String friendlyText, influent.idl.FL_PropertyType type, java.util.List<influent.idl.FL_Constraint> range) {
    this.key = key;
    this.friendlyText = friendlyText;
    this.type = type;
    this.range = range;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return friendlyText;
    case 2: return type;
    case 3: return range;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: friendlyText = (java.lang.String)value$; break;
    case 2: type = (influent.idl.FL_PropertyType)value$; break;
    case 3: range = (java.util.List<influent.idl.FL_Constraint>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * key of the Property to search on   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * key of the Property to search on   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'friendlyText' field.
   * a human readable label to display if the key isn't friendly (optional)   */
  public java.lang.String getFriendlyText() {
    return friendlyText;
  }

  /**
   * Sets the value of the 'friendlyText' field.
   * a human readable label to display if the key isn't friendly (optional)   * @param value the value to set.
   */
  public void setFriendlyText(java.lang.String value) {
    this.friendlyText = value;
  }

  /**
   * Gets the value of the 'type' field.
   * type of the Property to search on   */
  public influent.idl.FL_PropertyType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * type of the Property to search on   * @param value the value to set.
   */
  public void setType(influent.idl.FL_PropertyType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'range' field.
   * list of possible values, or descriptions of ranges allowed   */
  public java.util.List<influent.idl.FL_Constraint> getRange() {
    return range;
  }

  /**
   * Sets the value of the 'range' field.
   * list of possible values, or descriptions of ranges allowed   * @param value the value to set.
   */
  public void setRange(java.util.List<influent.idl.FL_Constraint> value) {
    this.range = value;
  }

  /** Creates a new FL_PropertyDescriptor RecordBuilder */
  public static influent.idl.FL_PropertyDescriptor.Builder newBuilder() {
    return new influent.idl.FL_PropertyDescriptor.Builder();
  }
  
  /** Creates a new FL_PropertyDescriptor RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_PropertyDescriptor.Builder newBuilder(influent.idl.FL_PropertyDescriptor.Builder other) {
    return new influent.idl.FL_PropertyDescriptor.Builder(other);
  }
  
  /** Creates a new FL_PropertyDescriptor RecordBuilder by copying an existing FL_PropertyDescriptor instance */
  public static influent.idl.FL_PropertyDescriptor.Builder newBuilder(influent.idl.FL_PropertyDescriptor other) {
    return new influent.idl.FL_PropertyDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_PropertyDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_PropertyDescriptor>
    implements org.apache.avro.data.RecordBuilder<FL_PropertyDescriptor> {

    private java.lang.String key;
    private java.lang.String friendlyText;
    private influent.idl.FL_PropertyType type;
    private java.util.List<influent.idl.FL_Constraint> range;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_PropertyDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_PropertyDescriptor.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FL_PropertyDescriptor instance */
    private Builder(influent.idl.FL_PropertyDescriptor other) {
            super(influent.idl.FL_PropertyDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.range)) {
        this.range = data().deepCopy(fields()[3].schema(), other.range);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public java.lang.String getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public influent.idl.FL_PropertyDescriptor.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'friendlyText' field */
    public java.lang.String getFriendlyText() {
      return friendlyText;
    }
    
    /** Sets the value of the 'friendlyText' field */
    public influent.idl.FL_PropertyDescriptor.Builder setFriendlyText(java.lang.String value) {
      validate(fields()[1], value);
      this.friendlyText = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'friendlyText' field has been set */
    public boolean hasFriendlyText() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'friendlyText' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearFriendlyText() {
      friendlyText = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public influent.idl.FL_PropertyType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public influent.idl.FL_PropertyDescriptor.Builder setType(influent.idl.FL_PropertyType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'type' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'range' field */
    public java.util.List<influent.idl.FL_Constraint> getRange() {
      return range;
    }
    
    /** Sets the value of the 'range' field */
    public influent.idl.FL_PropertyDescriptor.Builder setRange(java.util.List<influent.idl.FL_Constraint> value) {
      validate(fields()[3], value);
      this.range = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'range' field has been set */
    public boolean hasRange() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'range' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearRange() {
      range = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    public FL_PropertyDescriptor build() {
      try {
        FL_PropertyDescriptor record = new FL_PropertyDescriptor();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.friendlyText = fieldSetFlags()[1] ? this.friendlyText : (java.lang.String) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (influent.idl.FL_PropertyType) defaultValue(fields()[2]);
        record.range = fieldSetFlags()[3] ? this.range : (java.util.List<influent.idl.FL_Constraint>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
